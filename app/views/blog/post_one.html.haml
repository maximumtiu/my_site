= render partial: "static/header.html.haml"
.window.blog
  .row
    .col-xs-12.col-sm-12.col-md-12.blogstream
      %h2.title The 5 Most Meaningful Lessons I Learned from Coding Bootcamp
      .post
        %p.date-stamp September 20, 2015
        %a{:href => "http://techtalentsouth.com/student-blog/5-most-meaningful-lessons-i-learned-from-coding-bootcamp/"}
          .small-note Cross-posted to the official Tech Talent South student blog.
        %p.body As the summer draws to a close, I am now finishing up Tech Talent South's summer full-time Code Immersion program. It's been an absolutely amazing 8 weeks and I don't think I could have previously fathomed how much I've grown and learned in such a short amount of time. If you're thinking of starting a coding bootcamp soon, perhaps here at Tech Talent South, I absolutely recommend it, especially if you're eager to learn new things and want to break into the tech industry. At the risk of sounding like a Buzzfeed-esque listicle, here are some tips from me to you to make your journey as smooth as possible.
        %p.body
          %strong 1. Don't stretch yourself too thin
          %br
          Starting one of these programs, it’s tempting to try to learn everything. You know about Ruby and Rails, but don’t Python and Django sound cool? What about all the front-end frameworks out there, like Angular and React? The thirst for knowledge is real, but in order to soak it all up properly, you can’t try to tackle too much at once. A few years ago, I tried to juggle a full-time job, a part-time job, and a full-time college course schedule. It worked, sure, but I rarely slept, never had free time, and the quality of all my work seriously degenerated. A similar thing happened going into Tech Talent South, with seemingly endless opportunities for growth and fun, causing me to gain some serious prioritization and time management skills. The longer I do this, the better I can accurately estimate how much I can realistically get done in a day, ordered by importance. I’m finally feeling more sane thanks to this newfound development career.
        %p.body
          %strong 2. Every moment is an opportunity
          %br
          Nearly every aspect of going through a coding bootcamp is exciting, even to the point of being overwhelming. In the midst of all this, it’s important to remember that each moment holds potential for learning, for making connections, and for new opportunities. There’s always a chance to learn something from or teach something to someone. It’s one of the many reasons a bootcamp is such a great experience; you get the chance to meet so many different kinds of people on a daily basis that you’ll almost always be learning something new and interesting.
        %p.body
          %strong 3. Don't underestimate talking it out
          %br
          Hearing the term
          %a{:href => "https://en.wikipedia.org/wiki/Rubber_duck_debugging"} "rubber ducking"
          for the first time completely blew my mind. Finally, a phrase for something crucial to my success and sanity! Any time I'm stuck on a bug for an extended period of time, sometimes after trying nearly every possible debug route, I always find that talking about the problem out loud, step by step, is the number one way to solve it. Whether the recipient of my babbling is an inanimate object a la the rubber duck or a person that thinks tech-speak is gibberish, the process of describing the code's intentions and contrasting actual results cannot be overvalued. It's also one of the best ways to solve life problems in general.
        %p.body
          %strong 4. Troubleshooting is one of the best skills you can have
          %br
          By and large the thing that’s contributed most to my success during the class is the ability to troubleshoot. When faced with a bug or code challenge I haven’t faced before, I try my best to look at the problem from all possible angles myself before asking for outside assistance. First, I take a step back and see if I have a syntax error, or if there’s some improperly phrased logic, or if there’s anything else in my power I can do. Then, I check StackOverflow and the like to see if someone else has had a similar problem. From there, I immediately check the documentation of whatever language/tool I’m using for whatever specific method or attribute is referenced in the answer I’ve found. This way, I can gain a full understanding of exactly what I’m missing and how to solve the problem currently and in the future. This method has constantly kept me on the path of diving further into what my (and others’) code really means and why it works (or doesn’t), giving me a greater understanding of programming concepts. It’s by far one of the most fun and practical ways to learn a new skill.
        %p.body
          %strong 5. Know when to ask for help
          %br
          I pride myself on my self-sufficiency and independence, frankly often to a fault. One of my biggest challenges is admitting to myself that I’ve truly hit a wall, and need to ask for help. While learning through problem solving on your own is extremely important, rarely is spending multiple days in an endless spiral of documentation actually more valuable than being able to ask someone the answer in a matter of seconds. Being able to understand the scope and severity of your predicament is key. When in doubt, just ask! A little collaboration can never hurt.
