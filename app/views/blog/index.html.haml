- content_for :meta do
  %title Blog - Megan Tiu
  %meta{name: 'description', content: 'Megan Tiu is a full-stack developer in Atlanta, Georgia. This is her blog. Read all about her experiences with Ruby, Rails, Javascript, developer culture, and more.' }

= render partial: "static/header.html.haml"
.window.blog
  .row
    .col-xs-12.col-sm-12.col-md-12.blogstream
      %a{:href => 'blog/11/your-own-personal-gitignore'}
        %h2.title Your Own Personal .gitignore
        %p.date-stamp August 21, 2016
      .post
        %p.body
          Have you been wanting a way to create and keep new files in a git repo without checking them into git, and
          %em also
          not adding them to your .gitignore? Maybe you're working on a large team and want to impose on them neither your config files nor another line in the project's
          = succeed "?" do
            %code.inline .gitignore
          Well, you're in luck.
        %p.body
          It's the
          = succeed "!" do
            %strong git exclude
        %p.body
          %a{:href => 'blog/11/your-own-personal-gitignore'} Read more...
  .row
    .col-xs-12.col-sm-12.col-md-12.blogstream
      %a{:href => "blog/10/files-created-by-rails-generators"}
        %h2.title Files Created by Rails Generators
        %p.date-stamp July 17, 2016
      .post
        %p.body Generators are one of Rails' greatest features and one of the reasons it's so easy to get up and running with new Rails projects. Unfortunately, they tend to be accompanied by a lot of extra files you may or may not need. Whenever I'm using generators, I like to know exactly what I'm getting into file-wise, ideally via a reference that lists what files I can expect to have when running them. Yes, this exists in the form of man pages for each individual generator, but I prefer to be able to see many at once, comparing my options. I've yet to see this kind of resource. Until now.
        %p.body
          For this guide, I'll be using a Rails 5.0 default application with no additional gems and no modifications to the generator system. If you're looking to modify the content created by the generators, Thoughtbot has a helpful blog post on that
          = succeed "." do
            %a{:href => "https://robots.thoughtbot.com/reduce-application-clutter-disable-unwanted-rails"} here
          Railsguides.net also has a great post on generator usage and getting more out of the basic generators
          = succeed "." do
            %a{:href => "http://railsguides.net/advanced-rails-model-generators/"} here
          With that said...
        %p.body
          %a{:href => "blog/10/files-created-by-rails-generators"} Read more...
  .row
    .col-xs-12.col-sm-12.col-md-12.blogstream
      %a{:href => "blog/9/apprenticeship-patterns-lessons-learned"}
        %h2.title Apprenticeship Patterns: Lessons Learned
        %p.date-stamp June 26, 2016
      .post
        %p.body
          For the past six months, I've been part of a book club of developing developers reading Apprenticeship Patterns by Dave Hoover and Adewale Oshineye. We took a leisurely pace to truly understand and appreciate all the different lessons this book provides and I'm so glad we did. The book is structured in patterns: reusable solutions to common problems in one's career. While the Record What You Learn and Share What You Learn patterns have been massively influential for me in an immediate and concrete way (
          %a{:href => "/blog/3/blog-buddies"}> they're why I started this blog
          ), I've found more useful advice in some of the book's overall themes.
        %p.body
          %a{:href => "blog/9/apprenticeship-patterns-lessons-learned"} Read more...
  .row
    .col-xs-12.col-sm-12.col-md-12.blogstream
      %a{:href => "blog/8/upgrading-rails-doesnt-have-to-be-painful"}
        %h2.title Upgrading Rails Doesn't Have to Be Painful
        %p.date-stamp June 19, 2016
      .post
        %p.body
          Rails 5 is nearly here! But you're dreading the upgrade process. Fear no more, friend: this guide has you covered. This year, I was fortunate enough to attend RailsConf in Kansas City, including the
          %a{:href => "https://speakerdeck.com/derekprior/keep-rails-upgraded"} Keep Rails Upgraded
          workshop by
          %a{:href => "https://github/derekprior"} Derek Prior,
          %a{:href => "https://github.com/calebthompson"} Caleb Thompson,
          and
          %a{:href => "https://github.com/schneems"} Richard Schneeman.
          As someone relatively new to Rails, they swiftly took me from never having upgraded Rails versions to feeling totally comfortable updating my apps in production.
        %p.body Depending on the size of your app, this isn't intended to be a particularly short process. You'll be reading gem changelogs, wrestling with deprecation warnings, and waiting patiently for your Rubygems dependencies to resolve. But it's really not as hard as it seems!
        %p.body
          %a{:href => "blog/8/upgrading-rails-doesnt-have-to-be-painful"} Read more...
  .row
    .col-xs-12.col-sm-12.col-md-12.blogstream
      %a{:href => "blog/7/the-ins-and-outs-of-put-and-patch"}
        %h2.title The Ins and Outs of PUT and PATCH
        %p.date-stamp June 12, 2016
      .post
        %p.body The world of HTTP is vast! GET and POST are by far the most popular type of requests, but they'll only get you so far. Until recently, the only instances I'd ever really needed to use methods other than GET and POST were server-side while consuming others' APIs; this never proved to be an issue. Lately, however, I've been making more API requests from my own client-side apps, which has brought along some unique challenges. What if you need to update a resource? Meet PUT and PATCH.
        %p.body
          %a{:href => "blog/7/the-ins-and-outs-of-put-and-patch"} Read more...
  .row
    .col-xs-12.col-sm-12.col-md-12.blogstream
      %a{:href => "blog/6/adventures-of-a-one-woman-development-team"}
        %h2.title Adventures of a One-Woman Development Team
        %p.date-stamp June 5, 2016
      .post
        %p.body At time of writing, I've been studying and practicing web development for roughly a year. In that time, I've gone from nervous, questioning, and anxious about my future to firmly planted in a career I love. In June of last year, I introduced myself to modern HTML & CSS (the skills I learned as a 10-year-old weren't going to cut it in a professional setting). In July, I started writing Ruby. I went through a web dev bootcamp. I learned to use Rails, Javascript, git. I learned to work on a team, debug my code, and explore the vast world of programming. In September, I started my first full-time development job.
        %p.body Nine months later, I'm my company's technical lead. I'm also the most junior person there. I'm also the only developer, period. A team of one.
        %p.body
          %a{:href => "blog/6/adventures-of-a-one-woman-development-team"} Read more...
  .row
    .col-xs-12.col-sm-12.col-md-12.blogstream
      %a{:href => "blog/5/rubys-enumerable-module-and-you"}
        %h2.title Ruby's Enumerable Module and You
        %p.date-stamp May 29, 2016
      .post
        %p.body
          When was the last time you explored
          = succeed "?" do
            %a{:href => "http://ruby-doc.org/core-2.3.0/Enumerable.html"} Ruby's Enumerable module
        %p.body
          Want to get more control over your data?
          %em Of course you do.
          Thankfully, you're in luck!
          %code.inline Enumerable
          is included anywhere you can use an
          %code.inline #each
          method. Arrays? Yup. Hashes? You bet. You can even use it in your own custom classes. Discovering this module was a big level-up for meâ€“all of a sudden, I could accomplish more in fewer lines of code. I could read my data-concerned code easier. I could lift a horse with my newfound power! (Okay, that last one's probably not true. But still, the Enumerable module is pretty great.)
        %p.body Here are a few of my favorite ways to use the Enumerable module:
        %p.body
          %a{:href => "blog/5/rubys-enumerable-module-and-you"} Read more...
  .row
    .col-xs-12.col-sm-12.col-md-12.blogstream
      %a{:href => "blog/4/getting-and-setting-cookies-in-javascript"}
        %h2.title Getting and Setting Cookies in Javascript the Fun and Easy Way
        %p.date-stamp May 22, 2016
      .post
        %p.body
          Here we are: my first installment for the #BlogBuddies blog with
          %a{href: "http://locrawfish.github.io/"} my buddy Loren!
          My goal for this series,
          %a{href: "/blog/3/blog-buddies"} (as outlined here),
          is to share what I'm learning on a weekly basis with others--be it lessons in teamwork, new workflow techniques, or fun little hacks--and to have a record of my progress. This week,
          %span.heavier I worked with cookies for the first time.
        %p.body
          Until I started work on one of our company's new Javascript-based projects, I had never really thought about, much less used, cookies. I'd always assumed (mostly out of ignorance), that cookies would be difficult to use effectively. This week, I was very happy to be proved wrong.
        %p.body
          %a{:href => "blog/4/getting-and-setting-cookies-in-javascript"} Read more...
  .row
    .col-xs-12.col-sm-12.col-md-12.blogstream
      %a{:href => "/blog/3/blog-buddies"}
        %h2.title #BlogBuddies
        %p.date-stamp May 15, 2016
      .post
        %p.body Learning is fun. But when you learn a lot at once, it's hard to keep track of all the things you learn in a given time.
        %p.body I've had this blog for a while now, yet at a whopping count of two posts, I clearly haven't been utilizing it properly. Thanks to some inspiration by some friends and our book club, this changes now!
        %p.body
          %a{:href => "/blog/3/blog-buddies"} Read more...
