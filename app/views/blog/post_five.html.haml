- @title = "Ruby's Enumerable Module and You"
- content_for :meta do
  %title #{@title + " - Megan Tiu "}

= render partial: "static/header.html.haml"
.window.blog
  .row
    .col-xs-12.col-sm-12.col-md-12.blogstream
      %h1.title #{@title}
      .post
        %p.date-stamp May 29, 2016
        %p.body
          When was the last time you explored
          = succeed "?" do
            %a{:href => "http://ruby-doc.org/core-2.3.0/Enumerable.html"} Ruby's Enumerable module
        %p.body
          Want to get more control over your data?
          %em Of course you do.
          Thankfully, you're in luck!
          %code.inline Enumerable
          is included anywhere you can use an
          %code.inline #each
          method. Arrays? Yup. Hashes? You bet. You can even use it in your own custom classes. Discovering this module was a big level-up for meâ€“all of a sudden, I could accomplish more in fewer lines of code. I could read my data-concerned code easier. I could lift a horse with my newfound power! (Okay, that last one's probably not true. But still, the Enumerable module is pretty great.)
        %p.body Here are a few of my favorite ways to use the Enumerable module:
        %h2#checking-a-collection-against-a-condition Checking a Collection Against a Condition
        %p.body
          All of the following methods accept any block of code that returns a boolean and will tell you if the block returns
          %code.inline true
          for the specified amount of items in the collection.
        %h3.body#any #any?
        %p.body
          %code.inline any?
          checks to see if at least one item in a collection meets the specified condition and returns a boolean based on its findings.
          %pre
            [1, 2, 3].any? { |i| i == 3 } => true
          %h3.body#all #all?
          %p.body
            Similar to
            = succeed "," do
              %code.inline any?
            %code.inline all?
            checks if every item meets the passed condition.
          %pre
            [1, 2, 3].all? { |i| i < 3 } => false
          %h3.body#none #none?
          %p.body
            That's right: it's all or nothing.
          %pre
            [1, 2, 3].none? { |i| i.even? } => false
          %h3.body#one #one?
          %p.body
            I've yet to personally find a great use case for this
            = succeed "," do
              %code.inline one
            but I'm sure it's out there! Performs just like its friends listed above, but this time checking if the condition returns
            %code.inline true
            for only one item. Once two items meet the condition, this method returns
            = succeed "." do
              %code.inline false
          %pre
            [1, 2, 3].one? { |i| i == 2 } => true
          %p.body
            If you're dealing with particularly large collections and performance is a concern, you might want to stay away from
            %code.inline all?
            and
            %code.inline none?
            unless you really need them, as they look at every item in the specified collection.
        %h2#finding-items-meeting-a-condition Finding Specific Items
        %p.body Maybe you already know that there are items in your collection meeting a certain condition. But which items exactly?
        %h3.body#find #find
        %p.body
          This method returns the first item in a collection that meets the condition.
          %code.inline find
          (AKA
          = succeed ")" do
            %code.inline detect
          stops execution once it finds the item, so its impact on program performance is limited.
          %pre
            [1, 2, 3].find { |i| i.odd? } => 1&#x000A;[1, 2, 3].detect { |i| i.even? } => 2
        %h3.body#find-all #find_all
        %p.body
          Particularly handy if you need access to every item meeting a condition;
          %code.inline find_all
          (AKA
          = succeed ")" do
            %code.inline select
          will return them all!
          %pre
            [1, 2, 3].find_all { |i| i.odd? } => [1, 3]&#x000A;[1, 2, 3].select { |i| i.odd? } => [1, 3]
        %p.body
          If nothing in the collection returns
          %code.inline true
          for the passed block, both
          %code.inline find
          and
          %code.inline find_all
          will return
          = succeed "." do
            %code.inline nil
        %p.body
          Since both of these methods have two different names, which should you use?
          %code.inline find
          and
          %code.inline detect
          will yield the same results, but generally the Ruby community prefers
          %code.inline find
          and
          %code.inline find_all
          over their counterparts--the names are much clearer. When using these monikers, it's significantly easier to tell exactly what a block of code is doing at a glance.
        %h2#activerecordohyeah ActiveRecord::OhYeah
        %p.body
          Running a Rails app using ActiveRecord? Your ActiveRecord Collections have this module mixed in! Makes for some fun stuff like:
          %pre
            Product.where(color: "Blue").find_all do |product|&#x000A;&nbsp;&nbsp;product.current_price &lt; product.original_price&#x000A;end
        %p.body
          if you want to know which blue Products are on sale. You could even do:
          %pre
            User.where.not(email: nil).any? do |user|&#x000A;&nbsp;&nbsp;user.email.include? '@apple.com'&#x000A;end
        %p.body
          to see if any of your users work at Apple. Combine any of these
          %code.inline Enumerable
          methods with regular expressions and watch your productivity soar!
        %h2#wrapping-up Wrapping Up
        %p.body
          If you check out
          = succeed "'s" do
            %code.inline Enumerable
          = succeed "," do
            %a{:href => "http://ruby-doc.org/core-2.3.0/Enumerable.html"} documentation
          you're sure to see how many stellar and useful methods it includes. So many that they won't all fit in one post! Be on the look out for the next installment of Ruby's Enumerable Module and You, coming soon to a blog near you!
